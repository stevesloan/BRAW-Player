/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#ifndef BMD_BLACKMAGICRAWAPI_H
#define BMD_BLACKMAGICRAWAPI_H


#ifndef BMD_CONST
    #if defined(_MSC_VER)
        #define BMD_CONST __declspec(selectany) static const
    #else
        #define BMD_CONST static const
    #endif
#endif

#ifndef BMD_PUBLIC
	#define BMD_PUBLIC
#endif

#include <stdint.h>
#include "LinuxCOM.h"

// Type Declarations


// Interface ID Declarations

BMD_CONST REFIID IID_IBlackmagicRaw                               = /* 5A540A06-1B62-4224-ACB0-A2385C6ED649 */ { 0x5A,0x54,0x0A,0x06,0x1B,0x62,0x42,0x24,0xAC,0xB0,0xA2,0x38,0x5C,0x6E,0xD6,0x49 };
BMD_CONST REFIID IID_IBlackmagicRawFactory                        = /* 74FEBEDC-12D6-490D-9A77-48F19E8F60CB */ { 0x74,0xFE,0xBE,0xDC,0x12,0xD6,0x49,0x0D,0x9A,0x77,0x48,0xF1,0x9E,0x8F,0x60,0xCB };
BMD_CONST REFIID IID_IBlackmagicRawToneCurve                      = /* 7E40C13D-3575-46B5-B2B7-85DAE1EEFD77 */ { 0x7E,0x40,0xC1,0x3D,0x35,0x75,0x46,0xB5,0xB2,0xB7,0x85,0xDA,0xE1,0xEE,0xFD,0x77 };
BMD_CONST REFIID IID_IBlackmagicRawConstants                      = /* 54210027-FA67-4EEC-9FF6-BE781945104E */ { 0x54,0x21,0x00,0x27,0xFA,0x67,0x4E,0xEC,0x9F,0xF6,0xBE,0x78,0x19,0x45,0x10,0x4E };
BMD_CONST REFIID IID_IBlackmagicRawConfiguration                  = /* 46F11AFB-16F4-483E-9333-69D94DC1344B */ { 0x46,0xF1,0x1A,0xFB,0x16,0xF4,0x48,0x3E,0x93,0x33,0x69,0xD9,0x4D,0xC1,0x34,0x4B };
BMD_CONST REFIID IID_IBlackmagicRawConfigurationEx                = /* ACE9078F-ABA0-4B26-A954-EDA108DADA5A */ { 0xAC,0xE9,0x07,0x8F,0xAB,0xA0,0x4B,0x26,0xA9,0x54,0xED,0xA1,0x08,0xDA,0xDA,0x5A };
BMD_CONST REFIID IID_IBlackmagicRawResourceManager                = /* DC09804F-7005-4AA7-ADC9-12E0FE33896C */ { 0xDC,0x09,0x80,0x4F,0x70,0x05,0x4A,0xA7,0xAD,0xC9,0x12,0xE0,0xFE,0x33,0x89,0x6C };
BMD_CONST REFIID IID_IBlackmagicRawMetadataIterator               = /* F85AE78D-5DC2-40BC-8C1D-D0D805523ADA */ { 0xF8,0x5A,0xE7,0x8D,0x5D,0xC2,0x40,0xBC,0x8C,0x1D,0xD0,0xD8,0x05,0x52,0x3A,0xDA };
BMD_CONST REFIID IID_IBlackmagicRawClipProcessingAttributes       = /* AA3F216F-123F-4617-B741-6B6F497E94AA */ { 0xAA,0x3F,0x21,0x6F,0x12,0x3F,0x46,0x17,0xB7,0x41,0x6B,0x6F,0x49,0x7E,0x94,0xAA };
BMD_CONST REFIID IID_IBlackmagicRawPost3DLUT                      = /* 72A53B50-BB40-4C69-83FB-58CF58AF35B6 */ { 0x72,0xA5,0x3B,0x50,0xBB,0x40,0x4C,0x69,0x83,0xFB,0x58,0xCF,0x58,0xAF,0x35,0xB6 };
BMD_CONST REFIID IID_IBlackmagicRawFrameProcessingAttributes      = /* 659756A6-215B-47A7-A1A5-F5D6CD79D450 */ { 0x65,0x97,0x56,0xA6,0x21,0x5B,0x47,0xA7,0xA1,0xA5,0xF5,0xD6,0xCD,0x79,0xD4,0x50 };
BMD_CONST REFIID IID_IBlackmagicRawProcessedImage                 = /* D87A0F72-A883-42BB-8488-0089411C5035 */ { 0xD8,0x7A,0x0F,0x72,0xA8,0x83,0x42,0xBB,0x84,0x88,0x00,0x89,0x41,0x1C,0x50,0x35 };
BMD_CONST REFIID IID_IBlackmagicRawJob                            = /* 34C05ACF-7118-45EA-8B71-887E0515395D */ { 0x34,0xC0,0x5A,0xCF,0x71,0x18,0x45,0xEA,0x8B,0x71,0x88,0x7E,0x05,0x15,0x39,0x5D };
BMD_CONST REFIID IID_IBlackmagicRawCallback                       = /* 762C4B66-2BDA-468B-BB7B-2C922A637A4A */ { 0x76,0x2C,0x4B,0x66,0x2B,0xDA,0x46,0x8B,0xBB,0x7B,0x2C,0x92,0x2A,0x63,0x7A,0x4A };
BMD_CONST REFIID IID_IBlackmagicRawClipAudio                      = /* 76D4ACED-E0D6-45BB-B547-56B7435B2A1D */ { 0x76,0xD4,0xAC,0xED,0xE0,0xD6,0x45,0xBB,0xB5,0x47,0x56,0xB7,0x43,0x5B,0x2A,0x1D };
BMD_CONST REFIID IID_IBlackmagicRawFrame                          = /* 226A7BC7-16EE-4D78-B724-D3D0E073ADE7 */ { 0x22,0x6A,0x7B,0xC7,0x16,0xEE,0x4D,0x78,0xB7,0x24,0xD3,0xD0,0xE0,0x73,0xAD,0xE7 };
BMD_CONST REFIID IID_IBlackmagicRawFrameEx                        = /* F8C6C374-D7FB-4BD3-AD0B-C533464FF450 */ { 0xF8,0xC6,0xC3,0x74,0xD7,0xFB,0x4B,0xD3,0xAD,0x0B,0xC5,0x33,0x46,0x4F,0xF4,0x50 };
BMD_CONST REFIID IID_IBlackmagicRawManualDecoderFlow1             = /* 278815A6-A3C1-47C7-A0A6-6754DEAE5E7A */ { 0x27,0x88,0x15,0xA6,0xA3,0xC1,0x47,0xC7,0xA0,0xA6,0x67,0x54,0xDE,0xAE,0x5E,0x7A };
BMD_CONST REFIID IID_IBlackmagicRawManualDecoderFlow2             = /* DBEC4C39-B4C2-4A65-AA8C-2B3C7F4777E3 */ { 0xDB,0xEC,0x4C,0x39,0xB4,0xC2,0x4A,0x65,0xAA,0x8C,0x2B,0x3C,0x7F,0x47,0x77,0xE3 };
BMD_CONST REFIID IID_IBlackmagicRawClip                           = /* 408F758F-347F-4CDA-BA9B-89B6F15603CF */ { 0x40,0x8F,0x75,0x8F,0x34,0x7F,0x4C,0xDA,0xBA,0x9B,0x89,0xB6,0xF1,0x56,0x03,0xCF };
BMD_CONST REFIID IID_IBlackmagicRawClipEx                         = /* D260C7D0-93BD-4D68-B600-93B4CAB7F870 */ { 0xD2,0x60,0xC7,0xD0,0x93,0xBD,0x4D,0x68,0xB6,0x00,0x93,0xB4,0xCA,0xB7,0xF8,0x70 };

/* Enum BlackmagicRawVariantType - Variant types that may be stored as metadata */

typedef uint32_t BlackmagicRawVariantType;
enum _BlackmagicRawVariantType {
    blackmagicRawVariantTypeEmpty                                = 0,
    blackmagicRawVariantTypeU8                                   = 1,
    blackmagicRawVariantTypeS16                                  = 2,
    blackmagicRawVariantTypeU16                                  = 3,
    blackmagicRawVariantTypeS32                                  = 4,
    blackmagicRawVariantTypeU32                                  = 5,
    blackmagicRawVariantTypeFloat32                              = 6,
    blackmagicRawVariantTypeString                               = 7,
    blackmagicRawVariantTypeSafeArray                            = 8
};

/* Enum BlackmagicRawResourceType - Used in IBlackmagicRawResourceManager */

typedef uint32_t BlackmagicRawResourceType;
enum _BlackmagicRawResourceType {
    blackmagicRawResourceTypeBufferCPU                           = /* 'cpub' */ 0x63707562,	// block of CPU memory
    blackmagicRawResourceTypeBufferMetal                         = /* 'metb' */ 0x6D657462,	// a MTLBuffer
    blackmagicRawResourceTypeBufferCUDA                          = /* 'cudb' */ 0x63756462,	// a CUdeviceptr
    blackmagicRawResourceTypeBufferOpenCL                        = /* 'oclb' */ 0x6F636C62	// a cl_mem
};

/* Enum BlackmagicRawResourceFormat - Used for resource allocation */

typedef uint32_t BlackmagicRawResourceFormat;
enum _BlackmagicRawResourceFormat {
    blackmagicRawResourceFormatRGBAU8                            = /* 'rgba' */ 0x72676261,
    blackmagicRawResourceFormatBGRAU8                            = /* 'bgra' */ 0x62677261,
    blackmagicRawResourceFormatRGBU16Planar                      = /* '16pl' */ 0x3136706C,
    blackmagicRawResourceFormatRGBF32                            = /* 'f32s' */ 0x66333273,
    blackmagicRawResourceFormatRGBF32Planar                      = /* 'f32p' */ 0x66333270
};

/* Enum BlackmagicRawResourceUsage - Used in IBlackmagicRawResourceManager */

typedef uint32_t BlackmagicRawResourceUsage;
enum _BlackmagicRawResourceUsage {
    blackmagicRawResourceUsageReadCPUWriteCPU                    = /* 'rcwc' */ 0x72637763,
    blackmagicRawResourceUsageReadGPUWriteGPU                    = /* 'rgwg' */ 0x72677767,
    blackmagicRawResourceUsageReadGPUWriteCPU                    = /* 'rgwc' */ 0x72677763,
    blackmagicRawResourceUsageReadCPUWriteGPU                    = /* 'rcwg' */ 0x72637767
};

/* Enum BlackmagicRawPipeline - Used in IBlackmagicRawConfiguration. Each pipeline has different mappings to context/commandQueue */

typedef uint32_t BlackmagicRawPipeline;
enum _BlackmagicRawPipeline {
    blackmagicRawPipelineCPU                                     = /* 'cpub' */ 0x63707562,
    blackmagicRawPipelineCUDA                                    = /* 'cuda' */ 0x63756461,	// context/commandQueue maps to CUcontext/CUstream
    blackmagicRawPipelineMetal                                   = /* 'metl' */ 0x6D65746C,	// context/commandQueue maps to nil/MTLCommandQueue
    blackmagicRawPipelineOpenCL                                  = /* 'opcl' */ 0x6F70636C	// context/commandQueue maps to cl_context/cl_command_queue
};

/* Enum BlackmagicRawInstructionSet - Used in IBlackmagicRawConfiguration */

typedef uint32_t BlackmagicRawInstructionSet;
enum _BlackmagicRawInstructionSet {
    blackmagicRawInstructionSetSSE41                             = /* 'se41' */ 0x73653431,
    blackmagicRawInstructionSetAVX                               = /* 'avx_' */ 0x6176785F,
    blackmagicRawInstructionSetAVX2                              = /* 'avx2' */ 0x61767832
};

/* Enum BlackmagicRawAudioFormat - Used in IBlackmagicRawFileAudio */

typedef uint32_t BlackmagicRawAudioFormat;
enum _BlackmagicRawAudioFormat {
    blackmagicRawAudioFormatPCMLittleEndian                      = /* 'pcml' */ 0x70636D6C
};

/* Enum BlackmagicRawResolutionScale - Used in IBlackmagicRawFrame */

typedef uint32_t BlackmagicRawResolutionScale;
enum _BlackmagicRawResolutionScale {
    blackmagicRawResolutionScaleFull                             = /* 'full' */ 0x66756C6C,
    blackmagicRawResolutionScaleHalf                             = /* 'half' */ 0x68616C66,
    blackmagicRawResolutionScaleQuarter                          = /* 'qrtr' */ 0x71727472,
    blackmagicRawResolutionScaleEighth                           = /* 'eith' */ 0x65697468,
    blackmagicRawResolutionScaleFullUpsideDown                   = /* 'lluf' */ 0x6C6C7566,
    blackmagicRawResolutionScaleHalfUpsideDown                   = /* 'flah' */ 0x666C6168,
    blackmagicRawResolutionScaleQuarterUpsideDown                = /* 'rtrq' */ 0x72747271,
    blackmagicRawResolutionScaleEighthUpsideDown                 = /* 'htie' */ 0x68746965
};

/* Enum BlackmagicRawClipProcessingAttribute - Variant types that may be stored as metadata */

typedef uint32_t BlackmagicRawClipProcessingAttribute;
enum _BlackmagicRawClipProcessingAttribute {
    blackmagicRawClipProcessingAttributeColorScienceGen          = /* 'csgn' */ 0x6373676E,	// u16
    blackmagicRawClipProcessingAttributeGamma                    = /* 'gama' */ 0x67616D61,	// string
    blackmagicRawClipProcessingAttributeGamut                    = /* 'gamt' */ 0x67616D74,	// string
    blackmagicRawClipProcessingAttributeToneCurveContrast        = /* 'tcon' */ 0x74636F6E,	// float
    blackmagicRawClipProcessingAttributeToneCurveSaturation      = /* 'tsat' */ 0x74736174,	// float
    blackmagicRawClipProcessingAttributeToneCurveMidpoint        = /* 'tmid' */ 0x746D6964,	// float
    blackmagicRawClipProcessingAttributeToneCurveHighlights      = /* 'thih' */ 0x74686968,	// float
    blackmagicRawClipProcessingAttributeToneCurveShadows         = /* 'tsha' */ 0x74736861,	// float
    blackmagicRawClipProcessingAttributeToneCurveVideoBlackLevel = /* 'tvbl' */ 0x7476626C,	// u16
    blackmagicRawClipProcessingAttributeToneCurveBlackLevel      = /* 'tblk' */ 0x74626C6B,	// float
    blackmagicRawClipProcessingAttributeToneCurveWhiteLevel      = /* 'twit' */ 0x74776974,	// float
    blackmagicRawClipProcessingAttributeHighlightRecovery        = /* 'hlry' */ 0x686C7279,	// u16
    blackmagicRawClipProcessingAttributeAnalogGain               = /* 'gain' */ 0x6761696E,	// float
    blackmagicRawClipProcessingAttributePost3DLUTMode            = /* 'lutm' */ 0x6C75746D,	// string
    blackmagicRawClipProcessingAttributeEmbeddedPost3DLUTName    = /* 'emln' */ 0x656D6C6E,	// string
    blackmagicRawClipProcessingAttributeEmbeddedPost3DLUTTitle   = /* 'emlt' */ 0x656D6C74,	// string
    blackmagicRawClipProcessingAttributeEmbeddedPost3DLUTSize    = /* 'emls' */ 0x656D6C73,	// u16
    blackmagicRawClipProcessingAttributeEmbeddedPost3DLUTData    = /* 'emld' */ 0x656D6C64,	// float array, size*size*size*3 elements
    blackmagicRawClipProcessingAttributeSidecarPost3DLUTName     = /* 'scln' */ 0x73636C6E,	// string
    blackmagicRawClipProcessingAttributeSidecarPost3DLUTTitle    = /* 'sclt' */ 0x73636C74,	// string
    blackmagicRawClipProcessingAttributeSidecarPost3DLUTSize     = /* 'scls' */ 0x73636C73,	// u16
    blackmagicRawClipProcessingAttributeSidecarPost3DLUTData     = /* 'scld' */ 0x73636C64	// float array, size*size*size*3 elements
};

/* Enum BlackmagicRawFrameProcessingAttribute - Variant types that may be stored as metadata */

typedef uint32_t BlackmagicRawFrameProcessingAttribute;
enum _BlackmagicRawFrameProcessingAttribute {
    blackmagicRawFrameProcessingAttributeWhiteBalanceKelvin      = /* 'wbkv' */ 0x77626B76,	// u32
    blackmagicRawFrameProcessingAttributeWhiteBalanceTint        = /* 'wbtn' */ 0x7762746E,	// s16
    blackmagicRawFrameProcessingAttributeExposure                = /* 'expo' */ 0x6578706F,	// float
    blackmagicRawFrameProcessingAttributeISO                     = /* 'fiso' */ 0x6669736F	// u16
};

#if defined(__cplusplus)

// Forward Declarations

class IBlackmagicRaw;
class IBlackmagicRawFactory;
class IBlackmagicRawToneCurve;
class IBlackmagicRawConstants;
class IBlackmagicRawConfiguration;
class IBlackmagicRawConfigurationEx;
class IBlackmagicRawResourceManager;
class IBlackmagicRawMetadataIterator;
class IBlackmagicRawClipProcessingAttributes;
class IBlackmagicRawPost3DLUT;
class IBlackmagicRawFrameProcessingAttributes;
class IBlackmagicRawProcessedImage;
class IBlackmagicRawJob;
class IBlackmagicRawCallback;
class IBlackmagicRawClipAudio;
class IBlackmagicRawFrame;
class IBlackmagicRawFrameEx;
class IBlackmagicRawManualDecoderFlow1;
class IBlackmagicRawManualDecoderFlow2;
class IBlackmagicRawClip;
class IBlackmagicRawClipEx;

/* Struct SafeArrayBound - Dimensionality of a SafeArray */

struct SafeArrayBound
{
    uint32_t lLbound;
    uint32_t cElements;
};

/* Struct SafeArray - Typed array of data, passed into and out of API library */

struct SafeArray
{
    BlackmagicRawVariantType variantType;
    uint32_t cDims;
    void* data;
    SafeArrayBound bounds;
};

/* Struct Variant - Structure wrapping metadata, passed into and out of the API Library */

struct Variant
{
    BlackmagicRawVariantType vt;
    
    // Metadata 
    union {
        int16_t iVal;
        uint16_t uiVal;
        int32_t intVal;
        uint32_t uintVal;
        float fltVal;
        const char* bstrVal;
        SafeArray* parray;
    };
};

/* Interface IBlackmagicRaw - A single codec instance */

class BMD_PUBLIC IBlackmagicRaw : public IUnknown
{
public:
    virtual HRESULT OpenClip (/* in */ const char* fileName, /* out */ IBlackmagicRawClip** clip) = 0;
    virtual HRESULT SetCallback (/* in */ IBlackmagicRawCallback* callback) = 0;
    virtual HRESULT FlushJobs (void) = 0;	// Blocking call which will only return once all jobs have been completed

protected:
    virtual ~IBlackmagicRaw () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawFactory - Use this to create one or more Codec objects */

class BMD_PUBLIC IBlackmagicRawFactory : public IUnknown
{
public:
    virtual HRESULT CreateCodec (/* out */ IBlackmagicRaw** codec) = 0;

protected:
    virtual ~IBlackmagicRawFactory () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawToneCurve - Functions which provide useful tone curve operations */

class BMD_PUBLIC IBlackmagicRawToneCurve : public IUnknown
{
public:
    virtual HRESULT GetToneCurve (/* in */ const char* cameraType, /* in */ const char* gamma, /* in */ uint16_t gen /* Color science gen */, /* out */ float* contrast, /* out */ float* saturation, /* out */ float* midpoint, /* out */ float* highlights, /* out */ float* shadows, /* out */ float* blackLevel, /* out */ float* whiteLevel, /* out */ uint16_t* videoBlackLevel) = 0;	// Query tone curve parameters for a specific camera and gamma. These are only currently available on Gamut: Blackmagic Design, Gamma: Blackmagic Design Film, Blackmagic Design Extended Video, Blackmagic Design Custom. Note: Custom gamma can define a tone curve per clip, see BlackmagicRawClipProcessingAttributes::GetToneCurveForCustomGamma()
    virtual HRESULT EvaluateToneCurve (/* in */ const char* cameraType, /* in */ uint16_t gen, /* in */ float contrast, /* in */ float saturation, /* in */ float midpoint, /* in */ float highlights, /* in */ float shadows, /* in */ float blackLevel, /* in */ float whiteLevel, /* in */ uint16_t videoBlackLevel, /* out */ float* array, /* in */ uint32_t arrayElementCount) = 0;	// Evaluates tone curve, returned buffer can be used to visualise curve

protected:
    virtual ~IBlackmagicRawToneCurve () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawConstants - Constants which are used between IBlackmagicRawClipProcessingAttributes and IBlackmagicRawFrameProcessingAttributes are shared across clips */

class BMD_PUBLIC IBlackmagicRawConstants : public IUnknown
{
public:
    virtual HRESULT GetClipProcessingAttributeRange (/* in */ const char* cameraType, /* in */ BlackmagicRawClipProcessingAttribute attribute, /* out */ Variant* valueMin, /* out */ Variant* valueMax) = 0;
    virtual HRESULT GetClipProcessingAttributeList (/* in */ const char* cameraType, /* in */ BlackmagicRawClipProcessingAttribute attribute, /* out */ Variant* array /* optional */, /* out */ uint32_t* arrayElementCount /* optional */) = 0;
    virtual HRESULT GetFrameProcessingAttributeRange (/* in */ const char* cameraType, /* in */ BlackmagicRawFrameProcessingAttribute attribute, /* out */ Variant* valueMin, /* out */ Variant* valueMax) = 0;
    virtual HRESULT GetFrameProcessingAttributeList (/* in */ const char* cameraType, /* in */ BlackmagicRawFrameProcessingAttribute attribute, /* out */ Variant* array /* optional */, /* out */ uint32_t* arrayElementCount /* optional */) = 0;
    virtual HRESULT GetISOListForAnalogGain (/* in */ const char* cameraType, /* in */ float analogGain, /* out */ uint16_t* array /* optional */, /* out */ uint32_t* arrayElementCount /* optional */) = 0;

protected:
    virtual ~IBlackmagicRawConstants () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawConfiguration - Configuration for Codec Object. Configuration properties are read on first OpenClip() */

class BMD_PUBLIC IBlackmagicRawConfiguration : public IUnknown
{
public:
    virtual HRESULT SetPipeline (/* in */ BlackmagicRawPipeline pipeline /* changing pipeline will cause the default resource manager to be re-created */, /* in */ void* pipelineContext, /* in */ void* pipelineCommandQueue) = 0;
    virtual HRESULT GetPipeline (/* out */ BlackmagicRawPipeline* pipeline /* optional */, /* out */ void** pipelineContextOut /* optional */, /* out */ void** pipelineCommandQueueOut /* optional */) = 0;
    virtual HRESULT IsPipelineSupported (/* in */ BlackmagicRawPipeline pipeline, /* out */ bool* pipelineSupported) = 0;	// Verifies relevant hardware/DLLs are available
    virtual HRESULT SetCPUThreads (/* in */ uint32_t threadCount /* set 0 for default */) = 0;
    virtual HRESULT GetCPUThreads (/* out */ uint32_t* threadCount) = 0;
    virtual HRESULT GetMaxCPUThreadCount (/* out */ uint32_t* threadCount) = 0;
    virtual HRESULT SetWriteMetadataPerFrame (/* in */ bool writePerFrame) = 0;	// if true, frame metadata will be written to only the relevant frame
    virtual HRESULT GetWriteMetadataPerFrame (/* out */ bool* writePerFrame) = 0;

protected:
    virtual ~IBlackmagicRawConfiguration () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawConfigurationEx - Extended Configuration for Codec Object */

class BMD_PUBLIC IBlackmagicRawConfigurationEx : public IUnknown
{
public:
    virtual HRESULT GetResourceManager (/* out */ IBlackmagicRawResourceManager** resourceManager) = 0;
    virtual HRESULT SetResourceManager (/* in */ IBlackmagicRawResourceManager* resourceManager /* setting null will restore the default resource manager */) = 0;	// Set to NULL to return to default resource manager
    virtual HRESULT GetInstructionSet (/* out */ BlackmagicRawInstructionSet* instructionSet) = 0;
    virtual HRESULT SetInstructionSet (/* in */ BlackmagicRawInstructionSet instructionSet) = 0;

protected:
    virtual ~IBlackmagicRawConfigurationEx () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawResourceManager - Resource manager allows manual handling of CPU/GPU resource allocation */

class BMD_PUBLIC IBlackmagicRawResourceManager : public IUnknown
{
public:
    virtual HRESULT CreateResource (/* in */ void* context, /* in */ void* commandQueue, /* in */ uint32_t sizeBytes, /* in */ BlackmagicRawResourceType type, /* in */ BlackmagicRawResourceUsage usage, /* out */ void** resource) = 0;
    virtual HRESULT ReleaseResource (/* in */ void* context, /* in */ void* commandQueue, /* in */ void* resource, /* in */ BlackmagicRawResourceType type) = 0;

protected:
    virtual ~IBlackmagicRawResourceManager () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawMetadataIterator - Iterating metadata */

class BMD_PUBLIC IBlackmagicRawMetadataIterator : public IUnknown
{
public:
    virtual HRESULT Next (void) = 0;	// When at last entry, calling Next() will return S_FALSE
    virtual HRESULT GetKey (/* out */ const char** key) = 0;
    virtual HRESULT GetData (/* out */ Variant* data) = 0;

protected:
    virtual ~IBlackmagicRawMetadataIterator () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawClipProcessingAttributes - Clip attributes used during processing */

class BMD_PUBLIC IBlackmagicRawClipProcessingAttributes : public IUnknown
{
public:
    virtual HRESULT GetClipAttribute (/* in */ BlackmagicRawClipProcessingAttribute attribute, /* out */ Variant* value) = 0;
    virtual HRESULT SetClipAttribute (/* in */ BlackmagicRawClipProcessingAttribute attribute, /* in */ Variant* value) = 0;
    virtual HRESULT GetPost3DLUT (/* out */ IBlackmagicRawPost3DLUT** lut) = 0;

protected:
    virtual ~IBlackmagicRawClipProcessingAttributes () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawPost3DLUT - 3D LUT object */

class BMD_PUBLIC IBlackmagicRawPost3DLUT : public IUnknown
{
public:
    virtual HRESULT GetName (/* out */ const char** name) = 0;
    virtual HRESULT GetTitle (/* out */ const char** title) = 0;
    virtual HRESULT GetSize (/* out */ uint32_t* size) = 0;
    virtual HRESULT GetResourceGPU (/* in */ void* context, /* in */ void* commandQueue, /* out */ BlackmagicRawResourceType* type, /* out */ void** resource) = 0;
    virtual HRESULT GetResourceCPU (/* out */ void** resource) = 0;
    virtual HRESULT GetResourceSizeBytes (/* out */ uint32_t* sizeBytes) = 0;

protected:
    virtual ~IBlackmagicRawPost3DLUT () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawFrameProcessingAttributes - Frame attributes used during processing */

class BMD_PUBLIC IBlackmagicRawFrameProcessingAttributes : public IUnknown
{
public:
    virtual HRESULT GetFrameAttribute (/* in */ BlackmagicRawFrameProcessingAttribute attribute, /* out */ Variant* value) = 0;
    virtual HRESULT SetFrameAttribute (/* in */ BlackmagicRawFrameProcessingAttribute attribute, /* in */ Variant* value) = 0;

protected:
    virtual ~IBlackmagicRawFrameProcessingAttributes () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawProcessedImage - Processed image ready to display */

class BMD_PUBLIC IBlackmagicRawProcessedImage : public IUnknown
{
public:
    virtual HRESULT GetWidth (/* out */ uint32_t* width) = 0;
    virtual HRESULT GetHeight (/* out */ uint32_t* height) = 0;
    virtual HRESULT GetResource (/* out */ void** resource) = 0;
    virtual HRESULT GetResourceType (/* out */ BlackmagicRawResourceType* type) = 0;
    virtual HRESULT GetResourceFormat (/* out */ BlackmagicRawResourceFormat* format) = 0;
    virtual HRESULT GetResourceSizeBytes (/* out */ uint32_t* sizeBytes) = 0;
    virtual HRESULT GetResourceContextAndCommandQueue (/* out */ void** context, /* out */ void** commandQueue) = 0;

protected:
    virtual ~IBlackmagicRawProcessedImage () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawJob - Asynchronous job object */

class BMD_PUBLIC IBlackmagicRawJob : public IUnknown
{
public:
    virtual HRESULT Submit (void) = 0;
    virtual HRESULT Abort (void) = 0;
    virtual HRESULT SetUserData (/* in */ void* userData) = 0;
    virtual HRESULT GetUserData (/* out */ void** userData) = 0;

protected:
    virtual ~IBlackmagicRawJob () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawCallback - Callback for IBlackmagicRaw */

class BMD_PUBLIC IBlackmagicRawCallback : public IUnknown
{
public:
    virtual void ReadComplete (/* in */ IBlackmagicRawJob* job, /* in */ HRESULT result, /* in */ IBlackmagicRawFrame* frame) = 0;
    virtual void DecodeComplete (/* in */ IBlackmagicRawJob* job, /* in */ HRESULT result) = 0;
    virtual void ProcessComplete (/* in */ IBlackmagicRawJob* job, /* in */ HRESULT result, /* in */ IBlackmagicRawProcessedImage* processedImage) = 0;
    virtual void TrimProgress (/* in */ IBlackmagicRawJob* job, /* in */ float progress) = 0;
    virtual void TrimComplete (/* in */ IBlackmagicRawJob* job, /* in */ HRESULT result) = 0;
    virtual void SidecarMetadataParseWarning (/* in */ IBlackmagicRawClip* clip, /* in */ const char* fileName, /* in */ uint32_t lineNumber, /* in */ const char* info) = 0;	// offending line will be ignored
    virtual void SidecarMetadataParseError (/* in */ IBlackmagicRawClip* clip, /* in */ const char* fileName, /* in */ uint32_t lineNumber, /* in */ const char* info) = 0;	// entire file will be ignored

protected:
    virtual ~IBlackmagicRawCallback () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawClipAudio - Audio component for an opened movie clip */

class BMD_PUBLIC IBlackmagicRawClipAudio : public IUnknown
{
public:
    virtual HRESULT GetAudioFormat (/* out */ BlackmagicRawAudioFormat* format) = 0;
    virtual HRESULT GetAudioBitDepth (/* out */ uint32_t* bitDepth) = 0;
    virtual HRESULT GetAudioChannelCount (/* out */ uint32_t* channelCount) = 0;
    virtual HRESULT GetAudioSampleRate (/* out */ uint32_t* sampleRate) = 0;
    virtual HRESULT GetAudioSampleCount (/* out */ uint64_t* sampleCount) = 0;
    virtual HRESULT GetAudioSamples (/* in */ int64_t sampleFrameIndex, /* in */ void* buffer, /* in */ uint32_t bufferSizeBytes, /* in */ uint32_t maxSampleCount, /* out */ uint32_t* samplesRead /* optional */, /* out */ uint32_t* bytesRead /* optional */) = 0;

protected:
    virtual ~IBlackmagicRawClipAudio () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawFrame - Frame of a clip */

class BMD_PUBLIC IBlackmagicRawFrame : public IUnknown
{
public:
    virtual HRESULT GetFrameIndex (/* out */ uint64_t* frameIndex) = 0;
    virtual HRESULT GetTimecode (/* out */ const char** timecode) = 0;
    virtual HRESULT GetMetadataIterator (/* out */ IBlackmagicRawMetadataIterator** iterator) = 0;
    virtual HRESULT GetMetadata (/* in */ const char* key, /* out */ Variant* value) = 0;
    virtual HRESULT SetMetadata (/* in */ const char* key, /* in */ Variant* value) = 0;	// To clear metadata to movie original, set value to NULL. This data is not saved to disk until SaveSideCar() is called
    virtual HRESULT CloneFrameProcessingAttributes (/* out */ IBlackmagicRawFrameProcessingAttributes** frameProcessingAttributes) = 0;	// creates object with current frame processing attributes
    virtual HRESULT SetResolutionScale (/* in */ BlackmagicRawResolutionScale resolutionScale) = 0;
    virtual HRESULT GetResolutionScale (/* out */ BlackmagicRawResolutionScale* resolutionScale) = 0;
    virtual HRESULT SetResourceFormat (/* in */ BlackmagicRawResourceFormat resourceFormat) = 0;
    virtual HRESULT GetResourceFormat (/* out */ BlackmagicRawResourceFormat* resourceFormat) = 0;
    virtual HRESULT CreateJobDecodeAndProcessFrame (/* in */ IBlackmagicRawClipProcessingAttributes* clipProcessingAttributes /* optionally override clipProcessingAttributes */, /* in */ IBlackmagicRawFrameProcessingAttributes* frameProcessingAttributes /* optionally override frameProcessingAttributes */, /* out */ IBlackmagicRawJob** job) = 0;

protected:
    virtual ~IBlackmagicRawFrame () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawFrameEx - provides extra information for use with IBlackmagicRawManualDecoder */

class BMD_PUBLIC IBlackmagicRawFrameEx : public IUnknown
{
public:
    virtual HRESULT GetBitStreamSizeBytes (/* out */ uint32_t* bitStreamSizeBytes) = 0;
    virtual HRESULT GetProcessedImageResolution (/* out */ uint32_t* width, /* out */ uint32_t* height) = 0;

protected:
    virtual ~IBlackmagicRawFrameEx () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawManualDecoderFlow1 - Allowing manual decoding/processing of buffers, Flow1 is a pure CPU solution */

class BMD_PUBLIC IBlackmagicRawManualDecoderFlow1 : public IUnknown
{
public:
    virtual HRESULT PopulateFrameStateBuffer (/* in */ IBlackmagicRawFrame* frame, /* in */ IBlackmagicRawClipProcessingAttributes* clipProcessingAttributes /* optionally override clipProcessingAttributes */, /* in */ IBlackmagicRawFrameProcessingAttributes* frameProcessingAttributes /* optionally override frameProcessingAttributes */, /* out */ void* frameState, /* in */ uint32_t frameStateSizeBytes) = 0;
    virtual HRESULT GetFrameStateSizeBytes (/* out */ uint32_t* frameStateSizeBytes) = 0;
    virtual HRESULT GetDecodedSizeBytes (/* in */ void* frameStateBufferCPU, /* out */ uint32_t* decodedSizeBytes) = 0;
    virtual HRESULT GetProcessedSizeBytes (/* in */ void* frameStateBufferCPU, /* out */ uint32_t* processedSizeBytes) = 0;
    virtual HRESULT GetPost3DLUTSizeBytes (/* in */ void* frameStateBufferCPU, /* out */ uint32_t* post3DLUTSizeBytes) = 0;
    virtual HRESULT CreateJobDecode (/* in */ void* frameStateBufferCPU, /* in */ void* bitStreamBufferCPU, /* in */ void* decodedBufferCPU, /* out */ IBlackmagicRawJob** job) = 0;
    virtual HRESULT CreateJobProcess (/* in */ void* frameStateBufferCPU, /* in */ void* decodedBufferCPU, /* in */ void* processedBufferCPU, /* in */ void* post3DLUTBufferCPU, /* out */ IBlackmagicRawJob** job) = 0;

protected:
    virtual ~IBlackmagicRawManualDecoderFlow1 () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawManualDecoderFlow2 - Allowing manual decoding/processing of buffers, Flow2 is a hybrid CPU/GPU solution */

class BMD_PUBLIC IBlackmagicRawManualDecoderFlow2 : public IUnknown
{
public:
    virtual HRESULT PopulateFrameStateBuffer (/* in */ IBlackmagicRawFrame* frame, /* in */ IBlackmagicRawClipProcessingAttributes* clipProcessingAttributes /* optionally override clipProcessingAttributes */, /* in */ IBlackmagicRawFrameProcessingAttributes* frameProcessingAttributes /* optionally override frameProcessingAttributes */, /* out */ void* frameState, /* in */ uint32_t frameStateSizeBytes) = 0;
    virtual HRESULT GetFrameStateSizeBytes (/* out */ uint32_t* frameStateSizeBytes) = 0;
    virtual HRESULT GetDecodedSizeBytes (/* in */ void* frameStateBufferCPU, /* out */ uint32_t* decodedSizeBytes) = 0;
    virtual HRESULT GetWorkingSizeBytes (/* in */ void* frameStateBufferCPU, /* out */ uint32_t* workingSizeBytes) = 0;
    virtual HRESULT GetProcessedSizeBytes (/* in */ void* frameStateBufferCPU, /* out */ uint32_t* processedSizeBytes) = 0;
    virtual HRESULT GetPost3DLUTSizeBytes (/* in */ void* frameStateBufferCPU, /* out */ uint32_t* post3DLUTSizeBytes) = 0;
    virtual HRESULT CreateJobDecode (/* in */ void* frameStateBufferCPU, /* in */ void* bitStreamBufferCPU, /* in */ void* decodedBufferCPU, /* out */ IBlackmagicRawJob** job) = 0;
    virtual HRESULT CreateJobProcess (/* in */ void* context, /* in */ void* commandQueue, /* in */ void* frameStateBufferCPU, /* in */ void* decodedBufferGPU, /* in */ void* workingBufferGPU /* additional working buffer */, /* in */ void* processedBufferGPU, /* in */ void* post3DLUTBufferGPU, /* out */ IBlackmagicRawJob** job) = 0;	// Create a job to process a frame. This is performed on the specified GPU. After this process is complete a final processed image will be provided via a OnProcessComplete() callback

protected:
    virtual ~IBlackmagicRawManualDecoderFlow2 () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawClip - Opened movie clip */

class BMD_PUBLIC IBlackmagicRawClip : public IUnknown
{
public:
    virtual HRESULT GetWidth (/* out */ uint32_t* width) = 0;
    virtual HRESULT GetHeight (/* out */ uint32_t* height) = 0;
    virtual HRESULT GetFrameRate (/* out */ float* frameRate) = 0;
    virtual HRESULT GetFrameCount (/* out */ uint64_t* frameCount) = 0;
    virtual HRESULT GetTimecodeForFrame (/* in */ uint64_t frameIndex, /* out */ const char** timecode) = 0;
    virtual HRESULT GetMetadataIterator (/* out */ IBlackmagicRawMetadataIterator** iterator) = 0;
    virtual HRESULT GetMetadata (/* in */ const char* key, /* out */ Variant* value) = 0;
    virtual HRESULT SetMetadata (/* in */ const char* key, /* in */ Variant* value) = 0;	// To clear metadata to movie original, set value to NULL. This data is not saved to disk until SaveSideCar() is called
    virtual HRESULT GetCameraType (/* out */ const char** cameraType /* used by IBlackmagicRawConstants */) = 0;
    virtual HRESULT CloneClipProcessingAttributes (/* out */ IBlackmagicRawClipProcessingAttributes** clipProcessingAttributes) = 0;	// creates object with current clip processing attributes
    virtual HRESULT GetMulticardFileCount (/* out */ uint32_t* multicardFileCount) = 0;
    virtual HRESULT IsMulticardFilePresent (/* in */ uint32_t index, /* out */ bool* isMulticardFilePresent) = 0;
    virtual HRESULT GetSidecarFileAttached (/* out */ bool* isSidecarFileAttached) = 0;	// Check for successfully parsed sidecar file, which is automatically loaded upon opening of a clip
    virtual HRESULT SaveSidecarFile (void) = 0;	// Save metadata to sidecar file
    virtual HRESULT ReloadSidecarFile (void) = 0;	// Reload metadata from sidecar file
    virtual HRESULT CreateJobReadFrame (/* in */ uint64_t frameIndex, /* out */ IBlackmagicRawJob** job) = 0;	// Create a job to read a frame
    virtual HRESULT CreateJobTrim (/* in */ const char* fileName, /* in */ uint64_t frameIndex, /* in */ uint64_t frameCount, /* in */ IBlackmagicRawClipProcessingAttributes* clipProcessingAttributes /* optional */, /* in */ IBlackmagicRawFrameProcessingAttributes* frameProcessingAttributes /* optional */, /* out */ IBlackmagicRawJob** job) = 0;

protected:
    virtual ~IBlackmagicRawClip () {} // call Release method to drop reference count
};

/* Interface IBlackmagicRawClipEx - Extended use of IBlackmagicRawClip, to pass custom bitstream */

class BMD_PUBLIC IBlackmagicRawClipEx : public IUnknown
{
public:
    virtual HRESULT GetMaxBitStreamSizeBytes (/* out */ uint32_t* maxBitStreamSizeBytes) = 0;
    virtual HRESULT GetBitStreamSizeBytes (/* in */ uint64_t frameIndex, /* out */ uint32_t* bitStreamSizeBytes) = 0;
    virtual HRESULT CreateJobReadFrame (/* in */ uint64_t frameIndex, /* out */ void* bitStream /* optional */, /* in */ uint32_t bitStreamSizeBytes /* optional */, /* out */ IBlackmagicRawJob** job) = 0;
    virtual HRESULT QueryTimecodeInfo (/* out */ uint32_t* baseFrameIndex, /* out */ bool* isDropFrameTimecode) = 0;

protected:
    virtual ~IBlackmagicRawClipEx () {} // call Release method to drop reference count
};

/* Functions */

extern "C" {

    IBlackmagicRawFactory* BMD_PUBLIC CreateBlackmagicRawFactoryInstance(void);
    IBlackmagicRawFactory* BMD_PUBLIC CreateBlackmagicRawFactoryInstanceFromPath(/* in */ const char* loadPath);
    IBlackmagicRawFactory* BMD_PUBLIC CreateBlackmagicRawFactoryInstanceFromExeRelativePath(/* in */ const char* loadPath);
    HRESULT BMD_PUBLIC VariantInit(/* in */ Variant* variant);
    HRESULT BMD_PUBLIC VariantClear(/* in */ Variant* variant);
    SafeArray* BMD_PUBLIC SafeArrayCreate(/* in */ BlackmagicRawVariantType variantType, /* in */ uint32_t dimensions, /* in */ SafeArrayBound* safeArrayBound);
    HRESULT BMD_PUBLIC SafeArrayGetVartype(/* in */ SafeArray* safeArray, /* out */ BlackmagicRawVariantType* variantType);
    HRESULT BMD_PUBLIC SafeArrayGetLBound(/* in */ SafeArray* safeArray, /* in */ uint32_t dimensions, /* out */ long* lBound);
    HRESULT BMD_PUBLIC SafeArrayGetUBound(/* in */ SafeArray* safeArray, /* in */ uint32_t dimensions, /* out */ long* uBound);
    HRESULT BMD_PUBLIC SafeArrayAccessData(/* in */ SafeArray* safeArray, /* out */ void** outData);
    HRESULT BMD_PUBLIC SafeArrayUnaccessData(/* in */ SafeArray* safeArray);
    HRESULT BMD_PUBLIC SafeArrayDestroy(/* in */ SafeArray* safeArray);

}

#endif /* defined(__cplusplus) */
#endif /* defined(BMD_BLACKMAGICRAWAPI_H) */
